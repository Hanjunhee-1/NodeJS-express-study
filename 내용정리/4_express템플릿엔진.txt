템플릿 엔진의 종류에는 여러가지가 있는데 그 중에서도 Jade 템플릿 엔진을 사용해보았다.

템플릿 엔진을 사용하기 위해서는 세팅해주어야할 것들이 있다.

app.set('view engine', 'jade');
먼저 이렇게 어떤 템플릿 엔진을 사용할 것인지에 대한 세팅을 해주고

app.set('views', './views');
해당 템플릿 엔진으로 작성된 코드가 들어있는 디렉토리는 어디인지에 대한 세팅을 해준다.
★ 디렉토리 명은 보통 views 로 지정하며 따로 명시해주지 않는다 하더라도 현재 위치에서 views 라는 디렉토리를 찾는다고 한다.


이렇게 세팅이 끝났다면 views 디렉토리에 Jade 템플릿 엔진을 이용한 html 코드를 작성한다.

★ Jade 로 html 코드를 작성해보자!
    html 파일을 작성하는 것과 비슷하다! 하지만 태그로 감싸거나 할 필요 없이 indentation(들여쓰기) 만 잘해서 구분해주면 된다.
    
    html
        head
            title= _title
        body
            h1 WOW
            ul
                -for(var i=0; i<5; i++)
                    li cool~ 
            div= time

    대충 이런 식의 구조로 이루어진다!

    기존 html 코드에서 javascript 코드를 사용했던 것처럼 하고 싶다면
    javascript 코드라는 것을 구분해주기 위한 '-' 를 붙여주면 된다!

    'div= time' 에서 알수 있듯이 이것은 route 해줄 때 넘겨주는 값을 받는 것인데 그것은 아래에서 확인하자!


★ 템플릿 엔진으로 작성된 코드를 route 해서 화면에 띄워보자!
    일반적으로 res.send() 를 많이 사용했는데 이번에는 render() 라는 method 를 활용할 것이다.
    app.get("/template", (req, res) => {
        res.render('index', {time: Date(), _title: "It is awesome!!"})
    })

    render() 의 첫번째 매개변수로는 템플릿 엔진으로 작성된 파일의 이름을 주고 두번째 매개변수로는 해당 파일에서
    속성에 대해 필요한 값을 보내주는 것이다.

4_express템플릿엔진 폴더를 참고하자!